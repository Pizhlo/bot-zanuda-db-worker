// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	operation "db-worker/internal/config/operation"
	model "db-worker/internal/storage/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDriver) Begin(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockDriverMockRecorder) Begin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDriver)(nil).Begin), ctx, id)
}

// Commit mocks base method.
func (m *MockDriver) Commit(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDriverMockRecorder) Commit(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDriver)(nil).Commit), ctx, id)
}

// DBName mocks base method.
func (m *MockDriver) DBName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DBName indicates an expected call of DBName.
func (mr *MockDriverMockRecorder) DBName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBName", reflect.TypeOf((*MockDriver)(nil).DBName))
}

// Exec mocks base method.
func (m *MockDriver) Exec(ctx context.Context, req *model.Request, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, req, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockDriverMockRecorder) Exec(ctx, req, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDriver)(nil).Exec), ctx, req, id)
}

// FinishTx mocks base method.
func (m *MockDriver) FinishTx(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTx", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishTx indicates an expected call of FinishTx.
func (mr *MockDriverMockRecorder) FinishTx(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTx", reflect.TypeOf((*MockDriver)(nil).FinishTx), ctx, id)
}

// Host mocks base method.
func (m *MockDriver) Host() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(string)
	return ret0
}

// Host indicates an expected call of Host.
func (mr *MockDriverMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockDriver)(nil).Host))
}

// InsertTimeout mocks base method.
func (m *MockDriver) InsertTimeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTimeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// InsertTimeout indicates an expected call of InsertTimeout.
func (mr *MockDriverMockRecorder) InsertTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTimeout", reflect.TypeOf((*MockDriver)(nil).InsertTimeout))
}

// Name mocks base method.
func (m *MockDriver) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDriverMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDriver)(nil).Name))
}

// Password mocks base method.
func (m *MockDriver) Password() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Password")
	ret0, _ := ret[0].(string)
	return ret0
}

// Password indicates an expected call of Password.
func (mr *MockDriverMockRecorder) Password() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*MockDriver)(nil).Password))
}

// Port mocks base method.
func (m *MockDriver) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockDriverMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockDriver)(nil).Port))
}

// Queue mocks base method.
func (m *MockDriver) Queue() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queue")
	ret0, _ := ret[0].(string)
	return ret0
}

// Queue indicates an expected call of Queue.
func (mr *MockDriverMockRecorder) Queue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*MockDriver)(nil).Queue))
}

// ReadTimeout mocks base method.
func (m *MockDriver) ReadTimeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTimeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// ReadTimeout indicates an expected call of ReadTimeout.
func (mr *MockDriverMockRecorder) ReadTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTimeout", reflect.TypeOf((*MockDriver)(nil).ReadTimeout))
}

// Rollback mocks base method.
func (m *MockDriver) Rollback(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDriverMockRecorder) Rollback(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDriver)(nil).Rollback), ctx, id)
}

// RoutingKey mocks base method.
func (m *MockDriver) RoutingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoutingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// RoutingKey indicates an expected call of RoutingKey.
func (mr *MockDriverMockRecorder) RoutingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutingKey", reflect.TypeOf((*MockDriver)(nil).RoutingKey))
}

// Run mocks base method.
func (m *MockDriver) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockDriverMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDriver)(nil).Run), ctx)
}

// Stop mocks base method.
func (m *MockDriver) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDriverMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDriver)(nil).Stop), ctx)
}

// Table mocks base method.
func (m *MockDriver) Table() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table")
	ret0, _ := ret[0].(string)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockDriverMockRecorder) Table() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockDriver)(nil).Table))
}

// Type mocks base method.
func (m *MockDriver) Type() operation.StorageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(operation.StorageType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockDriverMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDriver)(nil).Type))
}

// User mocks base method.
func (m *MockDriver) User() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(string)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockDriverMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockDriver)(nil).User))
}

// MocktransactionEditor is a mock of transactionEditor interface.
type MocktransactionEditor struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionEditorMockRecorder
}

// MocktransactionEditorMockRecorder is the mock recorder for MocktransactionEditor.
type MocktransactionEditorMockRecorder struct {
	mock *MocktransactionEditor
}

// NewMocktransactionEditor creates a new mock instance.
func NewMocktransactionEditor(ctrl *gomock.Controller) *MocktransactionEditor {
	mock := &MocktransactionEditor{ctrl: ctrl}
	mock.recorder = &MocktransactionEditorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionEditor) EXPECT() *MocktransactionEditorMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MocktransactionEditor) Begin(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MocktransactionEditorMockRecorder) Begin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MocktransactionEditor)(nil).Begin), ctx, id)
}

// Commit mocks base method.
func (m *MocktransactionEditor) Commit(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MocktransactionEditorMockRecorder) Commit(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MocktransactionEditor)(nil).Commit), ctx, id)
}

// FinishTx mocks base method.
func (m *MocktransactionEditor) FinishTx(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTx", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishTx indicates an expected call of FinishTx.
func (mr *MocktransactionEditorMockRecorder) FinishTx(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTx", reflect.TypeOf((*MocktransactionEditor)(nil).FinishTx), ctx, id)
}

// Rollback mocks base method.
func (m *MocktransactionEditor) Rollback(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MocktransactionEditorMockRecorder) Rollback(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MocktransactionEditor)(nil).Rollback), ctx, id)
}

// Mockrunner is a mock of runner interface.
type Mockrunner struct {
	ctrl     *gomock.Controller
	recorder *MockrunnerMockRecorder
}

// MockrunnerMockRecorder is the mock recorder for Mockrunner.
type MockrunnerMockRecorder struct {
	mock *Mockrunner
}

// NewMockrunner creates a new mock instance.
func NewMockrunner(ctrl *gomock.Controller) *Mockrunner {
	mock := &Mockrunner{ctrl: ctrl}
	mock.recorder = &MockrunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrunner) EXPECT() *MockrunnerMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *Mockrunner) Exec(ctx context.Context, req *model.Request, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, req, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockrunnerMockRecorder) Exec(ctx, req, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*Mockrunner)(nil).Exec), ctx, req, id)
}

// Run mocks base method.
func (m *Mockrunner) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockrunnerMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockrunner)(nil).Run), ctx)
}

// Stop mocks base method.
func (m *Mockrunner) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockrunnerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*Mockrunner)(nil).Stop), ctx)
}

// Mockconfigurator is a mock of configurator interface.
type Mockconfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockconfiguratorMockRecorder
}

// MockconfiguratorMockRecorder is the mock recorder for Mockconfigurator.
type MockconfiguratorMockRecorder struct {
	mock *Mockconfigurator
}

// NewMockconfigurator creates a new mock instance.
func NewMockconfigurator(ctrl *gomock.Controller) *Mockconfigurator {
	mock := &Mockconfigurator{ctrl: ctrl}
	mock.recorder = &MockconfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconfigurator) EXPECT() *MockconfiguratorMockRecorder {
	return m.recorder
}

// DBName mocks base method.
func (m *Mockconfigurator) DBName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DBName indicates an expected call of DBName.
func (mr *MockconfiguratorMockRecorder) DBName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBName", reflect.TypeOf((*Mockconfigurator)(nil).DBName))
}

// Host mocks base method.
func (m *Mockconfigurator) Host() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(string)
	return ret0
}

// Host indicates an expected call of Host.
func (mr *MockconfiguratorMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*Mockconfigurator)(nil).Host))
}

// InsertTimeout mocks base method.
func (m *Mockconfigurator) InsertTimeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTimeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// InsertTimeout indicates an expected call of InsertTimeout.
func (mr *MockconfiguratorMockRecorder) InsertTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTimeout", reflect.TypeOf((*Mockconfigurator)(nil).InsertTimeout))
}

// Name mocks base method.
func (m *Mockconfigurator) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockconfiguratorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*Mockconfigurator)(nil).Name))
}

// Password mocks base method.
func (m *Mockconfigurator) Password() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Password")
	ret0, _ := ret[0].(string)
	return ret0
}

// Password indicates an expected call of Password.
func (mr *MockconfiguratorMockRecorder) Password() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*Mockconfigurator)(nil).Password))
}

// Port mocks base method.
func (m *Mockconfigurator) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockconfiguratorMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*Mockconfigurator)(nil).Port))
}

// Queue mocks base method.
func (m *Mockconfigurator) Queue() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queue")
	ret0, _ := ret[0].(string)
	return ret0
}

// Queue indicates an expected call of Queue.
func (mr *MockconfiguratorMockRecorder) Queue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*Mockconfigurator)(nil).Queue))
}

// ReadTimeout mocks base method.
func (m *Mockconfigurator) ReadTimeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTimeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// ReadTimeout indicates an expected call of ReadTimeout.
func (mr *MockconfiguratorMockRecorder) ReadTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTimeout", reflect.TypeOf((*Mockconfigurator)(nil).ReadTimeout))
}

// RoutingKey mocks base method.
func (m *Mockconfigurator) RoutingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoutingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// RoutingKey indicates an expected call of RoutingKey.
func (mr *MockconfiguratorMockRecorder) RoutingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutingKey", reflect.TypeOf((*Mockconfigurator)(nil).RoutingKey))
}

// Table mocks base method.
func (m *Mockconfigurator) Table() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table")
	ret0, _ := ret[0].(string)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockconfiguratorMockRecorder) Table() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*Mockconfigurator)(nil).Table))
}

// Type mocks base method.
func (m *Mockconfigurator) Type() operation.StorageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(operation.StorageType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockconfiguratorMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*Mockconfigurator)(nil).Type))
}

// User mocks base method.
func (m *Mockconfigurator) User() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(string)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockconfiguratorMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*Mockconfigurator)(nil).User))
}

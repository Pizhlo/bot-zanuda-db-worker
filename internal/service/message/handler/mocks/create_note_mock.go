// Code generated by MockGen. DO NOT EDIT.
// Source: create_note.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	interfaces "db-worker/internal/service/message/interface"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocknoteCreator is a mock of noteCreator interface.
type MocknoteCreator struct {
	ctrl     *gomock.Controller
	recorder *MocknoteCreatorMockRecorder
}

// MocknoteCreatorMockRecorder is the mock recorder for MocknoteCreator.
type MocknoteCreatorMockRecorder struct {
	mock *MocknoteCreator
}

// NewMocknoteCreator creates a new mock instance.
func NewMocknoteCreator(ctrl *gomock.Controller) *MocknoteCreator {
	mock := &MocknoteCreator{ctrl: ctrl}
	mock.recorder = &MocknoteCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknoteCreator) EXPECT() *MocknoteCreatorMockRecorder {
	return m.recorder
}

// SaveNotes mocks base method.
func (m *MocknoteCreator) SaveNotes(ctx context.Context, note []interfaces.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveNotes", ctx, note)
}

// SaveNotes indicates an expected call of SaveNotes.
func (mr *MocknoteCreatorMockRecorder) SaveNotes(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNotes", reflect.TypeOf((*MocknoteCreator)(nil).SaveNotes), ctx, note)
}

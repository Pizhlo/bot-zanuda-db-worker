// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "db-worker/internal/model"
	interfaces "db-worker/internal/service/message/interface"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHandler) Handle(ctx context.Context, msg interfaces.Message, shouldSave bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, msg, shouldSave)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockHandlerMockRecorder) Handle(ctx, msg, shouldSave interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHandler)(nil).Handle), ctx, msg, shouldSave)
}

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// GetOperation mocks base method.
func (m *MockMessage) GetOperation() model.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation")
	ret0, _ := ret[0].(model.Operation)
	return ret0
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockMessageMockRecorder) GetOperation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockMessage)(nil).GetOperation))
}

// GetRequestID mocks base method.
func (m *MockMessage) GetRequestID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetRequestID indicates an expected call of GetRequestID.
func (mr *MockMessageMockRecorder) GetRequestID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestID", reflect.TypeOf((*MockMessage)(nil).GetRequestID))
}

// MessageType mocks base method.
func (m *MockMessage) MessageType() model.MessageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageType")
	ret0, _ := ret[0].(model.MessageType)
	return ret0
}

// MessageType indicates an expected call of MessageType.
func (mr *MockMessageMockRecorder) MessageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageType", reflect.TypeOf((*MockMessage)(nil).MessageType))
}

// Model mocks base method.
func (m *MockMessage) Model() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(any)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockMessageMockRecorder) Model() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockMessage)(nil).Model))
}

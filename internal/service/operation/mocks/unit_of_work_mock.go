// Code generated by MockGen. DO NOT EDIT.
// Source: operation.go

// Package operation is a generated GoMock package.
package operation

import (
	context "context"
	storage "db-worker/internal/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockunitOfWork is a mock of unitOfWork interface.
type MockunitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockunitOfWorkMockRecorder
}

// MockunitOfWorkMockRecorder is the mock recorder for MockunitOfWork.
type MockunitOfWorkMockRecorder struct {
	mock *MockunitOfWork
}

// NewMockunitOfWork creates a new mock instance.
func NewMockunitOfWork(ctrl *gomock.Controller) *MockunitOfWork {
	mock := &MockunitOfWork{ctrl: ctrl}
	mock.recorder = &MockunitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockunitOfWork) EXPECT() *MockunitOfWorkMockRecorder {
	return m.recorder
}

// BuildRequests mocks base method.
func (m *MockunitOfWork) BuildRequests(msg map[string]interface{}) (map[storage.Driver]*storage.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRequests", msg)
	ret0, _ := ret[0].(map[storage.Driver]*storage.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRequests indicates an expected call of BuildRequests.
func (mr *MockunitOfWorkMockRecorder) BuildRequests(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRequests", reflect.TypeOf((*MockunitOfWork)(nil).BuildRequests), msg)
}

// ExecRequests mocks base method.
func (m *MockunitOfWork) ExecRequests(ctx context.Context, requests map[storage.Driver]*storage.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecRequests", ctx, requests)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecRequests indicates an expected call of ExecRequests.
func (mr *MockunitOfWorkMockRecorder) ExecRequests(ctx, requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecRequests", reflect.TypeOf((*MockunitOfWork)(nil).ExecRequests), ctx, requests)
}
